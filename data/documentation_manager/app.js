/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

//@require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});

Ext.application({
    models: [
        'Tree',
        'Status',
        'Document'
    ],
    stores: [
        'DocumentTree',
        'Status',
        'Document'
    ],
    views: [
        'MyViewport',
        'NewMenu',
        'ClearTriggerField',
        'TreeContextMenu'
    ],
    autoCreateViewport: true,
    controllers: [
        'Section'
    ],
    name: 'MyApp',

    launch: function() {
        document.getElementById('loading_container').style.display = 'none';
        Ext.QuickTips.init();

        // Apply a set of config properties to the singleton
        Ext.apply(Ext.QuickTips.getQuickTip(), {
            maxWidth: 200,
            minWidth: 100,
            showDelay: 50,
            trackMouse: false
        });

        // Add the additional 'advanced' VTypes
        Ext.apply(Ext.form.field.VTypes, {
            daterange: function(val, field) {
                var date = field.parseDate(val);

                if (!date) {
                    return false;
                }
                if (field.startDateField && (!this.dateRangeMax || (date.getTime() != this.dateRangeMax.getTime()))) {
                    var start = field.up('form').down('#' + field.startDateField);
                    start.setMaxValue(date);
                    start.validate();
                    this.dateRangeMax = date;
                }
                else if (field.endDateField && (!this.dateRangeMin || (date.getTime() != this.dateRangeMin.getTime()))) {
                    var end = field.up('form').down('#' + field.endDateField);
                    end.setMinValue(date);
                    end.validate();
                    this.dateRangeMin = date;
                }
                /*
                * Always return true since we're only using this vtype to set the
                * min/max allowed values (these are tested for after the vtype test)
                */
                return true;
            },

            daterangeText: 'Start date must be less than end date',

            password: function(val, field) {
                if (field.initialPassField) {
                    var pwd = field.up('form').down('#' + field.initialPassField);
                    return (val == pwd.getValue());
                }
                return true;
            },

            passwordText: 'Passwords do not match'
        });
    },

    setSelection: function(record) {
        this.selection = record;
    },

    getSelection: function() {
        return this.section;
    }

});
