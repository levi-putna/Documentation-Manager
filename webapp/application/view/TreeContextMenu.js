/*
 * File: application/view/TreeContextMenu.js
 * Date: Tue May 21 2013 15:29:09 GMT+1000 (EST)
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.TreeContextMenu', {
    extend: 'Ext.menu.Menu',
    alias: 'widget.TreeContextMenu',

    requires: [
        'MyApp.view.ContexSensitiveMenuItem'
    ],

    width: 120,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'contex_sensitive_menu_item',
                    contextVisibility: function(record) {
                        var desplayTypes = new Array("Project", "Client");
                        return (desplayTypes.indexOf(record.data.object_type) != -1);
                    },
                    menu: {
                        xtype: 'new_item_menu'
                    },
                    text: 'New'
                },
                {
                    xtype: 'contex_sensitive_menu_item',
                    contextVisibility: function(record) {
                        var desplayTypes = new Array("Invoice");
                        return (desplayTypes.indexOf(record.data.object_type) != -1);
                    },
                    contextHandler: function(item, e) {
                        alert("yess...");
                    },
                    text: 'Print'
                },
                {
                    xtype: 'contex_sensitive_menu_item',
                    contextVisibility: function(record) {
                        var desplayTypes = new Array("Invoice");
                        return (desplayTypes.indexOf(record.data.object_type) != -1);
                    },
                    contextHandler: function(item, e) {
                        alert("yess...");
                    },
                    text: 'Email'
                },
                {
                    xtype: 'menuseparator'
                },
                {
                    xtype: 'contex_sensitive_menu_item',
                    contextVisibility: function(record) {
                        var desplayTypes = new Array("Project", "Invoice", "Client");
                        return (desplayTypes.indexOf(record.data.object_type) != -1);
                    },
                    contextText: function(record) {
                        if(record.data.disabled){
                            return "Enable";
                        }else{
                            return "Disable";
                        }
                    },
                    contextHandler: function(item, e) {
                        console.log(item);

                        //record.disabled = !record.disabled;

                        //record.save({
                        //    failure: function(record, operation) {
                        //        alert('TODO error management');
                        //    },

                        //    success: function(record, operation) {

                        //    },

                        //    callback: function(record) {

                        //    }
                        //});
                    },
                    text: 'Disable'
                }
            ]
        });

        me.callParent(arguments);
    },

    setContex: function(record) {
        menuItems = this.items.items

        for (var i in menuItems) {
            var item = menuItems[i];

            if(item.xtype == "contex_sensitive_menu_item"){
                item.setVisible(item.contextVisibility(record));
                item.setText(item.contextText(record));
            }else{
                if(item.xtype != "menuseparator"){
                    item.setVisible(false);
                }
            }
        }


    }

});