/*
 * File: application/controller/ProductController.js
 * Date: Thu May 02 2013 16:10:31 GMT+1000 (EST)
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ProductController', {
    extend: 'Ext.app.Controller',

    models: [
        'Product'
    ],
    stores: [
        'Product'
    ],
    views: [
        'ProductGrid'
    ],

    init: function(application) {
        this.control({
            '[action=saveProduct]': {
                click: this.saveProduct
            },

            '[action=newProduct]': {
                click: this.newProduct
            },

            '[action=deleteProduct]': {
                click: this.deleteProduct
            },

            '#grid_product_menu': {
                itemclick: this.onProductGridMenuClick
            },

            '#form_product': {
                dirtychange :  this.markDirty
            },

            '#form_product field':{
                dirtychange :  this.markDirty
            }
        });
    },

    newProduct: function() {
        var form = Ext.getCmp('form_product');

        form.setLoading(true);

        var record = Ext.create('MyApp.model.Product');

        form.loadRecord(record);
        form.setTitle('New Product');
        form.setLoading(false);
    },

    loadProduct: function(id) {
        var store_product = this.getStore("Product");
        var form = Ext.getCmp('form_product');

        form.setLoading(true);

        //load records from server, we cannot rely on the store having the current record loaded.
        //so we will have to ask the moel to load itseld.
        MyApp.model.Product.load(id, {
            scope: this,

            failure: function(record, operation) {
                alert('TODO error management');
            },

            success: function(record, operation) {
                form.loadRecord(record);
                form.setTitle(record.data.name + ' (' + record.data.id + ')');
            },

            callback: function(record) {
                form.setLoading(false);
            }

        });
    },

    deleteProduct: function() {
        var store_product = this.getStore("Product");
        var form = Ext.getCmp('form_product');
        var record = form.getForm().getRecord();
        var desplay_name = record.data.name;

        Ext.MessageBox.show({
            title:'Confirm Deletion',
            msg: 'Are you sure you want to remove <b>' + desplay_name + '</b>?',
            buttons: Ext.Msg.YESNO,
            width:400,
            animateTarget: 'btn_product_delete',
            icon: Ext.window.MessageBox.QUESTION,
            fn: function(btn){
                if(btn == 'yes'){
                    store_product.remove(record);
                }
            }
        });
    },

    saveProduct: function() {
        var store_product = this.getStore("Product");
        var form = Ext.getCmp('form_product');

        var record = form.getForm().getRecord();

        if (form.getForm().isValid()) {
            form.getForm().updateRecord(record);

            form.setLoading(true);
            record.save({
                failure: function(record, operation) {
                    alert('TODO error management');
                },

                success: function(record, operation) {
                    store_product.load();
                },

                callback: function(record) {
                    form.setLoading(false);
                }
            });

        }
    },

    onProductGridMenuClick: function(view, record, item, index, e, eOpts) {
        var id = record.data.id;
        this.loadProduct(id);
    },

    markDirty: function(form) {

    }

});
