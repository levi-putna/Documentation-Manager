/*
 * File: application/controller/InvoiceController.js
 * Date: Mon May 20 2013 12:20:34 GMT+1000 (EST)
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.InvoiceController', {
    extend: 'Ext.app.Controller',

    models: [
        'Invoice',
        'InvoiceItem'
    ],
    stores: [
        'Invoice',
        'InvoiceItem'
    ],
    views: [
        'NewInvoice',
        'InvoiceForm',
        'InvoiceItemsGrid',
        'InvoiceTree'
    ],

    init: function(application) {
        this.getStore("InvoiceItem").addListener('datachanged',this.updateTotals, this);
        //grid.getPlugin('cellplugin').on('beforeedit', function() { /* do something*/});

        this.control({
            '[action=saveInvoice]': {
                click: this.saveInvoice
            },
            '[action=deleteInvoice]': {
                click: this.deleteInvoice
            },

            'invoice_items_grid actioncolumn': {
                click: function(){

                }
            },

            'invoice_items_grid': {
                edit: this.invoiceItemEdit
                //editorchange: this.invoiceItemEdit
            },
            'invoice_tree':{
                itemclick: this.onInvoiceTreeItemClick
            }
        });
    },

    loadInvoice: function(invoice_id) {
        var store_invoice_items = this.getStore("InvoiceItem");
        var store_invoice = this.getStore("Invoice");

        var form = Ext.getCmp('form_invoice');

        form.setLoading(true);

        //load records from server, we cannot rely on the store having the current record loaded.
        //so we will have to ask the moel to load itseld.
        MyApp.model.Invoice.load(invoice_id, {
            scope: this,

            failure: function(record, operation) {
                form.setLoading(false);
                alert('TODO error management');
            },

            success: function(record, operation) {
                form.loadRecord(record);
            },

            callback: function(record) {
                //form.setLoading(false);
            }

        });

        store_invoice_items.load({
            scope: this,

            params: {
                invoice_id: invoice_id
            },

            callback : function(records, options, success) {
                if(success){
                    //add a blank record
                    this.addBlankInvoiceItem(invoice_id);
                }else{
                    //TODO handle errors
                }
                form.setLoading(false);
            }
        });

        Ext.getCmp('mainContainer').getLayout().setActiveItem(1);

    },

    saveInvoice: function() {
        var store_invoice_items = this.getStore("InvoiceItem");
        var store_invoice = this.getStore("Invoice");
        var form = Ext.getCmp('form_invoice');
        var record = form.getForm().getRecord();

        if (form.getForm().isValid()) {
            form.getForm().updateRecord(record);

            form.setLoading(true);
            record.save({
                failure: function(record, operation) {
                    alert('TODO error management');
                    form.setLoading(false);
                },

                success: function(record, operation) {
                    if(store_invoice_items.getModifiedRecords().length > 0 || store_invoice_items.getRemovedRecords().length > 0 ){
                        //todo indicate that it saves...
                        store_invoice_items.sync({
                            success: function(){},
                            failure: function(){},
                            callback: function(record) {
                                form.setLoading(false);
                            },
                            scope: this
                        });
                    }else{
                        form.setLoading(false);
                    }
                },

                callback: function(record) {

                }
            });

        }
    },

    deleteInvoice: function() {
        var store_invoice = this.getStore("Invoice");
        var form = Ext.getCmp('form_invoice');
        var record = form.getForm().getRecord();
        var desplay_name = record.data.id;

        Ext.MessageBox.show({
            title:'Confirm Deletion',
            msg: 'Are you sure you want to remove <b>' + desplay_name + '</b>?',
            buttons: Ext.Msg.YESNO,
            width:400,
            animateTarget: 'btn_invoice_delete',
            icon: Ext.window.MessageBox.QUESTION,
            fn: function(btn){
                if(btn == 'yes'){
                    store_invoice.remove(record);
                }
            }
        });
    },

    addBlankInvoiceItem: function(invoice_id) {
        var store = this.getStore("InvoiceItem"); //getInvoiceItemStore();
        //var grid = Ext.getCmp('invoice_item_grid');//btn.up('grid');

        var invoice_item = new MyApp.model.InvoiceItem({
            "invoice_id" : invoice_id
        });

        var insert_point = store.getCount();

        store.insert(insert_point, invoice_item);

    },

    removeInvoiceItem: function(btn) {
        var store = this.getStore("InvoiceItem"); //getInvoiceItemStore();
        var grid = btn.up('grid');

        var selection = grid.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            store.remove(selection);
            this.invoiceItemEdit();
        }
    },

    invoiceItemEdit: function(editor, e, eOpts) {

        //if all the records are valid add a new row.
        if(this.isInvoiceItemsValid()){
            var invoice_id = Ext.getCmp('form_invoice').getForm().findField("id").getValue(); 
            this.addBlankInvoiceItem(invoice_id);
        }

        //update totals
        this.updateTotals();

    },

    isInvoiceItemsValid: function() {
        var store = this.getStore("InvoiceItem");

        var valid = true

        store.each(function(record) { 
            if(!record.isValid()){
                valid = false;
                return;
            }
        });

        return valid;
    },

    updateTotals: function() {
        var fld_subtotal = Ext.getCmp('fld_invoice_subtotal');
        var fld_tax = Ext.getCmp('fld_invoice_tax');
        var fld_total = Ext.getCmp('fld_invoice_total');
        var store = this.getStore("InvoiceItem");
        var tax_rate_store = Ext.data.StoreManager.lookup('TaxRate');

        var subtotal = 0;
        var tax = 0;
        var total = 0;

        store.each(function (record) {
            var qty = record.data.qty;
            var price = record.data.retail_price;
            var tax_rate_id = record.data.tax_rate_id; 

            if(qty === null || price === null){
                return;
            }

            var total_price = qty * price;

            var tax_rate = 0;
            if(tax_rate_id){
                tax_rate = tax_rate_store.getById(tax_rate_id).get('rate');
            }

            //if tax is charged on this item add it to the sub total
            if(tax_rate > 0){
                tax += (total_price/100) * tax_rate;
            }

            subtotal += total_price - tax;
            total += total_price;
        });

        fld_subtotal.setValue('$' + subtotal.toFixed(2));
        fld_tax.setValue('$' + tax.toFixed(2));    
        fld_total.setValue('$' + total.toFixed(2));
    },

    onInvoiceTreeItemClick: function(view, record, item, index, e, eOpts) {
        var type = record.data.object_type
        var id = record.data.object_id

        switch(type){
            case "Invoice":
            this.loadInvoice(id);
            break;
            case "Client":
            Ext.getCmp('mainContainer').getLayout().setActiveItem(2);
            break;
        }
    }

});
